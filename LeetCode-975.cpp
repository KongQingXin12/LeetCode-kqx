//
// Created by 1 on 2019/1/15.
//

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <numeric>
#include <algorithm>
#include <cmath>
#include <queue>
#include <regex>
#include <list>
#include <unordered_map>
using namespace std;


class Solution {
public:
    vector<int>odd_step;
    vector<int>even_step;
    int oddEvenJumps(vector<int>& A) {
        int ans = 0;
        int limit = A.size();
        map<int, vector<int>>tmp1;
        for (int j = 0; j < A.size(); ++j) {
            tmp1[A[j]].push_back(j);
        }
        for (int i = 0; i < A.size(); ++i) {
            vector<int>odd_tmp, even_tmp;
            if (find(odd_step.begin(), odd_step.end(), i) != odd_step.end()) {
                ans++;
                continue;
            }
            else if (check(i, A[i], limit, tmp1, odd_tmp, even_tmp))
            {
                cout << i << endl;
                odd_step.insert(odd_step.end(), odd_tmp.begin(), odd_tmp.end());
                odd_step.erase(unique(odd_step.begin(), odd_step.end()), odd_step.end());
                sort(odd_step.begin(), odd_step.end());
                even_step.insert(even_step.end(), even_tmp.begin(), even_tmp.end());
                ans++;
            }
        }
        return ans;
    }
    bool check(int location, int val, int limit, map<int, vector<int>>val_count, vector<int>&odd_tmp, vector<int>&even_tmp) {
        int step = 1;
        while (location < limit - 1) {
            switch (step)
            {
                case 1:
                {
                    odd_tmp.push_back(location);
                    if (find(odd_step.begin(), odd_step.end(), location) != odd_step.end())
                        return true;
                    int old_location = location;
                    auto origin = val_count.find(val);
                    for (auto i = origin; i != val_count.end(); ++i) {
                        pair<int, vector<int>>tmp_pair = *i;
                        if (tmp_pair.second.empty() || location >= tmp_pair.second.back()) {
                            val_count[tmp_pair.first].clear();
                            continue;
                        }
                        else {
                            val = tmp_pair.first;
                            for (int j = 0; j < tmp_pair.second.size(); ++j) {
                                if (location < tmp_pair.second[j])
                                {
                                    location = tmp_pair.second[j];
                                    break;
                                }
                            }
                        }
                        break;
                    }
                    if (old_location == location)
                        return false;
                    break;
                }
                case 0: {
                    even_tmp.push_back(location);
                    if (find(even_step.begin(), even_step.end(), location) != even_step.end())
                        return true;
                    int old_location = location;
                    auto origin = val_count.find(val);
                    for (auto i = origin; i != val_count.begin(); --i) {
                        pair<int, vector<int>>tmp_pair = *i;
                        if (tmp_pair.second.empty() || location >= tmp_pair.second.back()) {
                            val_count[tmp_pair.first].clear();
                            continue;
                        }
                        else {
                            val = tmp_pair.first;
                            for (int j = 0; j < tmp_pair.second.size(); ++j) {
                                if (location < tmp_pair.second[j])
                                {
                                    location = tmp_pair.second[j];
                                    break;
                                }
                            }
                            break;
                        }
                    }
                    if (location == old_location)//进入到最小值去寻找
                    {
                        pair<int, vector<int>>tmp_pair = *val_count.begin();
                        for (int i = 0; i < tmp_pair.second.size(); ++i) {
                            if (location < tmp_pair.second[i])
                            {
                                location = tmp_pair.second[i];
                                break;
                            }
                        }
                        if (location == old_location)
                            return false;
                    }
                    break;
                }
            }
            step = (step + 1) % 2;
        }
        return true;
    }
};

int main() {
    Solution s;
    vector<int>A = { 28972,52180,97908,16647,92940,41477,88034,37389,91815,88125,83067,32933,25927,9837,77946,40033,46492,9533,6932,84159,55865,16526,18940,36016,26581,13647,759,95517,44429,66128,56555,70169,89073,32903,65705,1485,29672,2614,44350,85697,89318,67089,84594,47282,8230,46496,71824,22520,12789,98469,44638,64832,99227,69819,41413,54023,49638,45109,56768,30911,11476,96291,90378,68768,44123,89034,46534,64285,92531,17826,76565,93385,41119,56105,33096,93108,33553,24328,39204,9683,15934,9689,71146,33208,3736,69089,29896,81055,91788,58529,93208,92309,39274,71273,1989,63269,96853,56956,29700,53970,38193,29538,44901,22539,47392,23848,1803,2222,42369,29850,3921,81655,9809,30819,82236,73511,42848,76686,25943,42185,81153,31161,80384,43692,70356,17926,45467,13410,56344,12919,94256,92263,27700,31679,428,99546,57677,31796,99593,26646,65163,42744,12014,25698,70532,23171,31383,17992,3739,5240,19544,9472,68711,88457,49515,30656,50443,71588,63170,15983,77289,89888,50248,69437,58163,16607,38465,96403,5366,76433,61870,56876,49282,15004,60971,94414,50783,84890,68452,17234,82115,16930,94268,16026,41146,82641,36064,61640,66310,29031,40509,58508,50066,93784,72391,8579,68499,59228,52644,32468,77728,90900,32428,48370,71640,76095,28261,57453,87522,7130,82730,70152,82720,88855,74394,66602,9473,57126,3401,43671,8445,60825,3265,73655,66643,8420,13106,77341,74479,90820,35126,20700,95471,47310,56649,9085,80663,22307,95034,46291,15797,60330,24997,11316,48608,50408,71136,90038,21730,82518,45354,12597,75099,38603,56017,321,24732,57915,3095,13154,52465,22046,70430,89264,16460,37167,7161,93959,71239,14385,23255,61393,29911,15754,83518,27590,70091,39700,23856,86476,70338,41310,62702,13679,97505,75181,82337,20622,83965,31800,34043,66750,87379,68247,29027,82456,13494,94267,70571,56154,20901,46074,42372,52896,76524,82358,48236,61552,81269,71438,59835,40236,6201,83177,20245,56928,21100,378,40325,54077,26061,5061,77085,48364,5428,13741,70251,98526,93796,96161,45630,65894,8370,58814,73770,89765,8262,41385,27156,11539,23437,80058,55512,54749,23071,82559,48456,83454,43838,173,22668,60891,16685,48451,59809,39065,2856,6197,80955,49503,9520,20501,32128,5521,60698,50077,77787,47655,54450,80393,82705,32636,9767,89755,77089,1961,6002,86361,40328,544,56593,99627,98337,24423,73818,18547,81961,61504,81682,68743,83133,13747,27029,18681,12373,22203,8338,44928,34520,887,19550,70231,4341,1859,85656,91504,3694,25985,35840,58097,62723,96441,27039,40160,37619,83857,19314,90929,66207,48920,71951,19671,4405,86546,35666,87343,62341,58210,88260,30384,38320,84479,90746,78578,91896,55045,17329,84823,88332,30419,66681,1880,92610,34713,56392,68412,82343,70697,32703,93065,22292,74691,50710,25344,51276,31491,52086,20855,26441,24461,86159,39153,85692,37875,32045,66410,40456,81870,64718,69981,96982,84493,34163,45941,86601,89278,53888,54569,8328,21275,11831,32530,1592,50772,59,35969,10213,24316,66412,26448,577,82557,53902,88259,26855,31980,3084,50760,89476,178,57752,24033,68686,92546,48435,87676,38570,21769,42269,65860,80235,67698,7184,79548,13252,11506,21234,17421,19316,20050,53529,86030,52541,65739,78229,99010,27429,94204,19554,19279,79588,7896,90122,90311,70212,69661,47955,7074,34581,76072,58769,30584,17219,21066,53417,70003,94429,78063,70611,63281,99800,60949,78165,40208,13934,36717,79235,50810,49556,20803,36244,74939,41718,17564,95880,93307,86058,48927,98672,7130,65492,3211,34447,55986,48297,43643,93737,88337,89062,78007,20155,66124,36996,88883,34439,59676,82694,32885,12130,35685,27039,35105,97674,85949,58455,83987,50544,93124,25324,90087,56408,11093,47319,31436,22142,78693,16830,62530,55355,54797,18711,70127,47323,55805,92835,99363,60971,50234,97776,3311,16440,70483,31434,49773,62290,40326,59106,31782,15977,63803,16304,16879,84987,77543,9987,73640,82306,82553,62305,53798,60969,32037,58012,78968,44454,10850,83892,29246,44191,65838,80360,63987,38608,10630,96764,49749,44174,76232,74123,70446,97973,83226,62791,12818,83007,51571,58495,55691,22216,55671,46983,89712,94109,98300,52933,29126,9442,2128,27649,3953,71758,47802,81982,83374,47267,48182,53016,65509,47595,95986,27557,3810,97195,8765,18804,27389,84097,31617,65590,84629,54330,22807,51338,2289,36614,18017,40217,6010,67009,68930,80673,59590,12333,14558,98424,69580,66246,48740,32373,85010,93970,24971,34380,31835,98508,57594,74244,33352,32669,74487,81532,14295,87544,65172,30389,19545,94678,52179,43919,30579,66031,891,91136,61622,61,6166,59997,24056,33143,87355,78659,51542,87681,58172,28024,97604,5931,6897,89609,55087,87624,79340,73261,95605,34458,62576,90613,24598,609,54565,42779,39749,38468,67602,52666,44186,67882,35897,49034,33467,52765,90606,10114,62440,17959,92331,82113,40507,95301,5751,60956,35406,79044,99487,29075,61581,65264,31273,29843,10120,94598,49408,70143,78650,26786,19452,37302,60986,52877,11549,98290,98919,84818,17027,41924,80615,98832,61653,17801,90429,29591,81516,66048,34459,60721,37584,60104,78286,71819,58186,71941,80353,37762,20517,69113,20850,65820,73674,33729,22811,74830,97514,75373,87187,47674,24961,10959,14984,27135,78210,12872,99862,4191,56966,57533,50162,16598,46457,84810,25687,36875,30573,39026,61223,52223,95754,46914,30431,1818,29360,83207,99569,57257,48245,38621,33174,35006,80905,34498,57637,14271,88017,30715,45746,25135,16441,93917,70372,92763,4062,55254,59963,96414,71646,63345,26823,89570,59130,98,63945,86031,9882,19207,54390,4186,38754,57809,24585,85087,9913,80172,20945,83416,65551,74607,51955,82133,16202,75382,1941,25098,8526,45207,27624,88248,4064,76213,87705,61969,19721,172,8610,82714,64256,90584,69670,10811,64229,31571,62633,17945,79656,70466,52494,60276,43203,51329,50904,33459,27123,38183,10937,16,75432,87373,34463,29442,74013,88597,4695,18258,9882,35888,83190,3475,33168,94031,57243,31690,86748,75422,5470,88326,91797,49985,62816,40392,34240,63094,77182,44835,54307,13653,34214,44413,89215,61100,35649,80467,23940,58090,94438,1295,57801,77300,54380,24631,86823,60741,41671,44104,88432,67435,98977,67133,10773,49319,63632,1575,15570,64514,5220,70878,13426,43396,79690,63753,20454,55990,71556,20865,6721,15413,77993,19916,78027,95600,70657,80677,78482,73234,69433,927,46190,40037,78232,76745,43934,72997,17467,86147,7418,46439,32426,83734,38642,11759,68721,18195,91043,72743,73984,31162,95389,41280,26713,65364,82443,93727,41575,73914,8788,92702,920,54150,29668,39013,44162,49603,80826,47666,50533,2700,36262,82046,30785,87860,43086,27778,12668,24204,61209,20447,97403,86681,49500,95350,5471,65814,47169,4437,69749,61726,68718,22817,7718,24148,42408,65948,72419,30424,82560,63561,21401,97439,90905,79668,57130,29354,14732,25506,54714,41684,24536,67764,50786,13591,27499,36004,26412,94211,21895,81087,1822,60346,7516,26920,98893,3037,37883,44025,37467,70866,77417,72515,26044,54006,84672,33918,29052,73365,331,71769,37557,81505,88523,49844,47980,36605,79560,15798,39488,24505,10602,76082,88300,78360,20079,27520,59704,25819,30254,51929,80149,59898,96645,33457,78888,56902,20053,11659,49785,20259,39433,4297,43455,38022,46369,81150,64365,32703,2161,14236,50460,88117,45934,42036,50632,13056,80068,49066,7345,91294,6846,2853,257,54522,32473,6547,4527,47020,7068,19981,74230,30917,2937,95811,93345,63768,76017,92588,34377,62604,97579,6164,86145,45211,91722,37663,4318,51575,93007,55084,24122,67925,55392,55335,23895,22046,1091,96902,75118,90094,45281,23652,47281,97462,87112,72949,67875,42970,57264,75974,23999,6696,73423,48350,66152,28846,70844,86409,60379,541,81517,22476,46705,8925,39669,89319,49682,71424,45107,49525,27485,67682,20231,90404,84137,25337,51289,95410,85379,10553,40798,37711,87939,96162,77181,64260,26523,26463,44588,40870,70577,41789,88610,10235,14904,76406,88096,53067,55570,58061,81041,84206,31781,39998,72560,69168,52591,30026,69736,77380,67933,91592,3007,24800,20201,20684,4213,64638,58707,18573,54994,27911,79785,69369,49329,68856,88215,60158,35919,17612,47841,767,26611,52616,54689,17661,39266,47446,84915,20308,36754,91930,36251,54628,52085,91426,94653,28380,60378,73860,4695,75232,38956,64976,39350,19168,65555,5746,57085,52545,2164,67364,49671,24657,53582,65194,61925,70933,22247,91683,49688,27681,59695,8739,1774,25519,84961,10569,53159,74711,57682,22974,49078,41230,11842,35340,99012,4702,15371,85100,85459,10926,84711,86474,48451,17434,49556,2463,77022,19308,32997,58974,65372,23914,38497,59010,26806,85900,52219,65050,85463,8110,82966,26421,20808,68282,43118,75048,9198,62637,47842,74095,2558,7303,65139,99405,11288,25211,5255,81507,10645,71708,37690,53463,37389,20918,84958,6959,37633,78410,50377,51883,11279,21010,73094,31276,73785,59877,69697,29957,41560,85078,19219,7369,80073,86249,17927,81632,22992,79212,68965,46184,39303,87016,21466,58575,18793,93222,10081,93693,89666,96777,72130,94521,1485,36271,52810,56634,2931,86956,13782,13757,7573,89546,21592,62198,89986,69274,68574,81632,8131,65482,41655,71681,65129,31398,56801,76500,90505,88876,19015,40604,92536,59726,7702,23957,29263,71143,43545,40986,79173,6243,39169,98309,80665,79898,10198,11291,2027,4416,96243,94337,95767,56216,14316,9445,84272,57284,96820,20511,23621,78127,7239,65865,21787,65475,79061,90391,85671,53876,70418,34850,66672,61033,43490,37905,48356,93630,82320,722,80143,40229,97820,13031,84899,49013,26716,92450,56166,78527,41673,32452,87705,41474,17782,65404,74371,91135,67529,31660,19514,58720,81983,10894,76999,85452,56148,62867,98650,74224,29963,80039,58764,36205,92131,33644,59090,97073,91023,95303,34876,24731,67564,19997,88669,32617,83291,93503,94313,37475,25136,62941,2397,99055,27597,43982,27596,92812,84275,53583,59451,94357,11982,6545,24454,5595,56200,33641,86159,7614,14047,57666,17500,76765,13397,52807,65327,27768,69997,53803,337,21420,19541,49337,25540,1276,78777,26516,30410,98588,14042,32478,56092,86372,10733,33744,61424,80491,66704,29414,3980,1528,84273,30729,66210,42616,41907,64845,61097,52809,11335,82952,44975,30137,47598,88654,69387,85285,89758,99553,10496,44538,16648,60306,56817,19140,16147,92813,9298,88888,36655,79154,79449,49168,50205,4140,27734,43002,55498,58698,28205,42592,19341,69412,24032,64643,97617,22482,2338,41565,8405,53091,95082,26350,9774,38148,71088,87980,44705,1444,79134,16302,49710,21207,35212,77832,14816,49723,49388,18439,32666,68648,15540,81865,7625,43784,53467,42436,74556,44745,53831,68332,10596,27735,57852,92823,49870,18925,18485,3122,12368,59276,11366,15795,33114,30034,89233,11275,54443,34347,62602,88374,14533,33822,77217,24969,28599,514,25239,78123,62224,63979,20703,70546,95641,2444,45156,40599,50847,78869,72723,97356,67046,67897,48328,27103,42858,19594,71877,7942,34995,8442,69475,86276,41651,34335,80246,49312,31536,13337,29418,72382,947,12979,85156,55134,32391,60269,40423,22865,33197,80405,85670,17738,86818,27057,75635,22337,78139,78367,77861,66112,40512,66971,12297,83458,44065,66608,8846,801,30888,22998,84178,68716,68199,82795,13206,89252,17166,42423,99825,62292,52945,4024,17865,89542,60438,13316,27915,76892,97122,19843,8345,30042,53779,66842,66775,70082,52829,91806,32296,61036,7178,48429,55362,93312,71306,62846,43803,57730,23771,77938,80736,54426,54799,59395,83111,5625,60355,40925,90474,20674,32248,43708,59011,98871,49442,82362,57138,27755,61878,12890,28449,69231,3066,73906,99919,54921,69600,37467,5642,14338,93354,45621,10108,79844,6005,22929,38056,91689,17266,76495,50955,36536,94075,2817,7356,66100,48923,73979,9958,54352,9823,48064,36297,65166,16056,52587,91358,20689,49918,42699,89837,6156,46659,99526,98666,48538,7176,38546,90470,10834,87146,76322,29966,30234,12142,72085,42441,74567,37977,14047,98877,7481,1891,68844,22710,8494,14529,66803,50424,5365,28210,76715,7349,59649,86961,6765,52658,54732,81342,61387,78931,11484,6419,41451,60995,73797,76078,3873,40372,58693,39021,402,53638,37307,71170,94859,87045,360,28292,17674,29852,94924,55905,9551,68638,19026,96167,44739,41583,11703,761,13040,9743,78798,38797,82700,66352,43981,92085,80270,19663,6596,13409,76475,78082,42467,86235,52691,83711,54957,87566,92538,39657,25432,33645,66548,72302,7608,59172,9681,87335,6758,33592,6890,41335,27697,39903,30850,51202,58521,5729 };
    s.oddEvenJumps(A);
    return 0;
}
